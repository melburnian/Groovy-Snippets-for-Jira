









/** 
* Updates value in field B based on value passed to field A 
* triggered upon issue creation within the specified project.
**/

// These lines of code import various classes that are needed for the script to function. 
// The ComponentAccessor class is a utility class that provides access to various Jira components, such as the CustomFieldManager. 
// The IssueEvent class represents an event that occurs in Jira related to an issue, such as the creation of an issue or an update to an issue. 
// The EventType class defines constants for the different types of events that can occur in Jira. 
// The CustomFieldManager class provides methods for managing custom fields in Jira, and the CustomField class represents a custom field in Jira.

import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.event.issue.IssueEvent
import com.atlassian.jira.event.type.EventType
import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField

def customFieldManager = ComponentAccessor.customFieldManager
def serviceTypeField = customFieldManager.getCustomFieldObjectByName("Service Type")
def requestTypeField = customFieldManager.getCustomFieldObjectByName("Request Type")

// These lines of code create instances of the IssueEvent and Issue classes. 
// The issueEvent variable is initialized with the value of the event parameter, which is passed to the script by Jira when the event occurs. 
// The issue variable is initialized with the Issue object associated with the IssueEvent, which is obtained using the issue property of the IssueEvent object.

def issueEvent = event as IssueEvent
def issue = issueEvent.issue

// This block of code is executed if the issue event has a change log, which is checked using the changeLog variable. 
// If the change log exists, the code retrieves the change items in the log using the getRelated() method of the ChangeLog class, 
// which takes a relationship name as an argument and returns a list of ChangeItem objects that have that relationship with the change log.

// The code then checks if the list of change items contains an item with a field name of "Service Type" using the find() method of the List class, 
// which takes a closure as an argument and returns the first element in the list for which the closure returns true. 
// If an item with a field name of "Service Type" is found, the code retrieves the values of the "Service Type" and "Request Type" fields 
// and sets the value of the "Request Type" field based on the mapping logic specified in the previous versions of the script.

if (issue.projectObject.key == "Fruit Shop" && issue.getIssueType().name == "Activity") {
  def changeLog = issueEvent.getChangeLog()
  if (changeLog) {
    def changeItems = changeLog.getRelated("ChildChangeItem")
    if (changeItems.find { it.field == "Service Type" }) {
      def serviceTypeValue = issue.getCustomFieldValue(serviceTypeField)
      def requestTypeValue = issue.getCustomFieldValue(requestTypeField)

      if (serviceTypeValue == "Orange") {
        issue.setCustomFieldValue(requestTypeField, "Fruit")
      }
      else if (serviceTypeValue == "Apple") {
        issue.setCustomFieldValue(requestTypeField, "Fruit")
      }
      else if (serviceTypeValue == "Carrot") {
        issue.setCustomFieldValue(requestTypeField, "Vegetable")
      }
    }
  }
}
